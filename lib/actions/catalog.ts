// lib/actions/catalog.ts
import 'server-only';
import { getSupabaseServer } from '@/lib/supabase';

export type Product = {
  id: string;
  name: string;
  description?: string | null;
  // —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∫–∞–∫ price (NUMERIC) –∏–ª–∏ price_cents (INTEGER)
  price_cents?: number | null;
  price?: number | null;
  is_active?: boolean | null;

  // üëá –¥–æ–±–∞–≤–∏–ª–∏ —Ç–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
  category?: string | null;
  stock_qty?: number | null;
};

export type Service = {
  id: string;
  name: string;
  description?: string | null;
  price_cents?: number | null;
  price?: number | null;
  is_active?: boolean | null;

  // üëá –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —É—Å–ª—É–≥
  category?: string | null;
  execution_time_minutes?: number | null;
};

// –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫ —á–∏—Å–ª—É –≤ —Ä—É–±–ª—è—Ö
function toRub(p?: number | null, c?: number | null): number {
  if (typeof c === 'number') return c / 100;
  if (typeof p === 'number') return p;
  return 0;
}

/** –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ), –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∏–º–µ–Ω–∏ */
export async function listProducts(): Promise<Product[]> {
  const sb = getSupabaseServer();

  // –í–´–ë–ò–†–ê–ï–ú –≤—Å–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
  const { data, error } = await sb
    .from('products')
    .select('id,name,description,price,price_cents,is_active,category,stock_qty')
    .order('name', { ascending: true });

  if (error) throw error;

  const items = (data ?? []).filter((x) => x.is_active ?? true) as Product[];
  // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º price, –æ—Å—Ç–∞–≤–∏–≤ –∏ —Å—Ç–∞—Ä–æ–µ, –∏ –Ω–æ–≤–æ–µ –ø–æ–ª–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º–∏
  return items.map((x) => ({
    ...x,
    price: toRub(x.price ?? null, x.price_cents ?? null),
  }));
}

/** –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ), –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∏–º–µ–Ω–∏ */
export async function listServices(): Promise<Service[]> {
  const sb = getSupabaseServer();

  const { data, error } = await sb
    .from('services')
    .select('id,name,description,price,price_cents,is_active,category,execution_time_minutes')
    .order('name', { ascending: true });

  if (error) throw error;

  const items = (data ?? []).filter((x) => x.is_active ?? true) as Service[];
  return items.map((x) => ({
    ...x,
    price: toRub(x.price ?? null, x.price_cents ?? null),
  }));
}
